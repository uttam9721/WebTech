Alright Uttam — let’s make this a **complete CSS guide** so you can treat this as your personal reference.
I’ll break it into **concepts + syntax + examples + pro tips**, and we’ll go deep but stay organized so you don’t get lost in the cascade.

---

## **1. What is CSS?**

CSS (**Cascading Style Sheets**) is a stylesheet language used to describe the look and formatting of HTML elements.
Think of **HTML** as the skeleton and **CSS** as the skin, clothes, and style.

* **Purpose:** Controls colors, fonts, layout, spacing, animations, and responsiveness.
* **Cascade:** If multiple styles target the same element, priority depends on **specificity**, **importance**, and **source order**.

---

## **2. CSS Syntax**

A CSS rule looks like this:

```css
selector {
  property: value;
}
```

Example:

```css
p {
  color: red;
  font-size: 16px;
}
```

**Parts:**

* **Selector** → Chooses the HTML element(s) (`p`, `.class`, `#id`)
* **Property** → The style to change (`color`, `font-size`, `margin`)
* **Value** → The setting for that property (`red`, `16px`, `10px`)

---

## **3. Ways to Apply CSS**

1. **Inline CSS** – Inside the HTML tag

   ```html
   <p style="color: blue;">Hello</p>
   ```
2. **Internal CSS** – Inside `<style>` in the HTML `<head>`

   ```html
   <style>
     p { color: blue; }
   </style>
   ```
3. **External CSS** – In a `.css` file linked in HTML

   ```html
   <link rel="stylesheet" href="styles.css">
   ```

---

## **4. CSS Selectors**

### **Basic Selectors**

* **Element selector**: `p {}` targets `<p>`
* **Class selector**: `.classname {}` targets `class="classname"`
* **ID selector**: `#idname {}` targets `id="idname"`

### **Combinators**

* **Descendant** → `div p` (all `p` inside `div`)
* **Child** → `div > p` (direct children only)
* **Adjacent sibling** → `h1 + p`
* **General sibling** → `h1 ~ p`

### **Attribute selectors**

```css
input[type="text"] { background: yellow; }
```

### **Pseudo-classes**

* `:hover` – mouse hover
* `:focus` – element is focused
* `:first-child`, `:last-child`
* `:nth-child(2)` – second child

### **Pseudo-elements**

* `::before`
* `::after`
* `::first-letter`

```css
p::first-letter { font-size: 2rem; }
```

---

## **5. CSS Units**

### **Absolute units**

* px (pixels)
* cm, mm, in (rarely used)

### **Relative units**

* em – relative to element’s font size
* rem – relative to root font size
* % – relative to parent
* vw/vh – viewport width/height
* fr – in CSS Grid

---

## **6. Colors in CSS**

* Named colors: `red`, `blue`
* Hex: `#ff0000`
* RGB: `rgb(255, 0, 0)`
* RGBA: `rgba(255, 0, 0, 0.5)`
* HSL: `hsl(0, 100%, 50%)`

---

## **7. Box Model**

Every element is a **box**:

1. **Content** – text/image
2. **Padding** – space between content and border
3. **Border** – wraps padding/content
4. **Margin** – space outside border

```css
div {
  margin: 10px;
  padding: 20px;
  border: 2px solid black;
}
```

---

## **8. Positioning**

* `static` (default)
* `relative` (position relative to itself)
* `absolute` (relative to nearest positioned ancestor)
* `fixed` (relative to viewport)
* `sticky` (switches between relative/fixed)

---

## **9. Display & Layout**

* `block`, `inline`, `inline-block`
* **Flexbox** → one-dimensional layout

```css
.container {
  display: flex;
  justify-content: center;
  align-items: center;
}
```

* **Grid** → two-dimensional layout

````css
.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}
``>

---

## **10. Typography**
```css
body {
  font-family: Arial, sans-serif;
  font-size: 16px;
  font-weight: bold;
  line-height: 1.5;
  text-align: center;
}
````

---

## **11. Backgrounds**

```css
div {
  background-color: lightblue;
  background-image: url('image.jpg');
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}
```

---

## **12. Transitions & Animations**

```css
button {
  transition: background 0.3s ease;
}
button:hover {
  background: red;
}
```

Keyframes animation:

```css
@keyframes move {
  0% { transform: translateX(0); }
  100% { transform: translateX(100px); }
}
div {
  animation: move 2s infinite alternate;
}
```

---

## **13. Media Queries (Responsive Design)**

```css
@media (max-width: 768px) {
  body {
    background: pink;
  }
}
```

---

## **14. CSS Variables**

```css
:root {
  --main-color: #3498db;
}
p {
  color: var(--main-color);
}
```

---

## **15. CSS Specificity Rules**

1. Inline styles → highest
2. ID selectors → higher
3. Class, pseudo-classes, attributes → medium
4. Element selectors → lowest

---

## **16. Modern CSS Features**

* `clamp()` for responsive sizes
* `aspect-ratio`
* `grid-template-areas`
* `:has()` relational selector
* CSS nesting (coming soon in most browsers)

---

## **17. CSS Best Practices**

* Keep styles in external files
* Use **BEM** naming (`block__element--modifier`)
* Avoid inline CSS for maintainability
* Use relative units for better responsiveness
* Minimize `!important`

---

## **18. Example – Putting It All Together**

```css
:root {
  --primary: #3498db;
}

body {
  font-family: 'Segoe UI', sans-serif;
  margin: 0;
  padding: 0;
  background: #f4f4f4;
}

header {
  background: var(--primary);
  color: white;
  padding: 1rem;
  text-align: center;
}

nav a {
  color: white;
  margin: 0 10px;
  text-decoration: none;
}
nav a:hover {
  text-decoration: underline;
}

.container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  padding: 1rem;
}

.card {
  background: white;
  padding: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  flex: 1 1 calc(33% - 20px);
}
